name: CI/CD - FastAPI Production

on:
  push:
    branches:
      - production

jobs:
  build:
    name: 🛠️ Build & Test (Production)
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔐 Create .env (production)
        run: |
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
          echo "JWT_EXPIRATION_SECONDS=${{ secrets.JWT_EXPIRATION_SECONDS }}" >> .env
          echo "EMAIL_GIT=${{ secrets.EMAIL_GIT }}" >> .env
          echo "TOKEN_GITHUB=${{ secrets.TOKEN_GITHUB }}" >> .env
          echo "USERNAME_GITHUB=${{ secrets.USERNAME_GITHUB }}" >> .env
      
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      
      - name: 🐳 Build & Run Tests
        run: |
          docker-compose -f docker-compose.prod.yml up --build -d
          sleep 10
          curl --fail http://localhost:8000 || (echo "❌ Production FastAPI failed to start" && exit 1)
          docker-compose -f docker-compose.prod.yml down
      
      - name: 📜 Show Logs (on failure)
        if: failure()
        run: |
          echo "======= BACKEND LOGS ======="
          docker-compose -f docker-compose.prod.yml logs backend || true
          echo "======= DB LOGS ======="
          docker-compose -f docker-compose.prod.yml logs db || true

  deploy:
    name: 🚀 Deploy to EC2 (Production)
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3

      - name: 🔑 Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to Production
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'ENDSSH'
            set -e

            if [ -d /home/ec2-user/production/.git ]; then
              echo '📂 Repo exists, pulling latest...'
              cd /home/ec2-user/production
              git fetch origin
              git reset --hard origin/production
            else
              echo '📂 Repo not found, cloning fresh...'
              git clone -b production https://github.com/Ahmed0Raza/Task-backend.git /home/ec2-user/production
              cd /home/ec2-user/production

              # Create .env only on fresh clone
              cat > .env << 'EOF'
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}
          POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION_SECONDS=${{ secrets.JWT_EXPIRATION_SECONDS }}
          EMAIL_GIT=${{ secrets.EMAIL_GIT }}
          TOKEN_GITHUB=${{ secrets.TOKEN_GITHUB }}
          USERNAME_GITHUB=${{ secrets.USERNAME_GITHUB }}
          EOF
            fi

            # Always bring up Docker
            sudo docker-compose -f docker-compose.prod.yml up --build -d
          ENDSSH
